scalar Date
scalar Upload

type Chat {
  id: ID!
  name: String
  participants: [UserWithAvatar!]!
  messages: [Message!]!
}

type ChatWithoutMessages {
  id: ID!
  name: String
  userUuid: ID!
  isGroupChat: Boolean!
  groupAvatarUrl: String
  participants: [UserWithAvatar!]!
  createdAt: Date!
}

type UserWithAvatar {
  id: ID!
  name: String!
  avatarUrl: String
}

type Message {
  id: ID!
  chatId: ID!
  userId: ID!
  userName: String!
  avatarUrl: String
  content: String!
  createdAt: Date!
  isRead: Boolean!
}

type Query {
  userChats: [ChatWithoutMessages!]!
  "Запрос одиночного чата с указанным пользователем"
  chatWithUser(userUuid: String!): ChatWithoutMessages
  "Запрос чата по ID (участники чата включают текущего пользователя)"
  chatById(chatId: ID!): ChatWithoutMessages
  chatMessages(chatId: ID!, limit: Int, offset: Int): [Message!]
}

type Mutation {
  createChat(participantsIds: [ID!]!, name: String): ChatWithoutMessages!
  """
  Групповой чат удаляет создатель для всех.

  Одиночный чат помечается флагом is_deleted в таблице party
  у пользователя, который удалил чат.
  """
  deleteChat(chatId: ID!): Boolean!
  sendMessage(chatId: ID!, content: String!): Message!
  uploadChatAvatar(image: Upload!, chatId: ID!): String!
  updateChatAvatar(image: Upload!, chatId: ID!): String!
  deleteChatAvatar(chatId: ID!): String
}

type Subscription {
  messageSent(chatId: ID!): Message!
}
