scalar Date
scalar Upload

type Chat {
  id: ID!
  name: String
  participants: [UserWithAvatar!]!
  messages: [Message!]!
}

type ChatWithoutMessages {
  id: ID!
  name: String
  userUuid: ID!
  isGroupChat: Boolean!
  groupAvatarUrl: String
  participants: [UserWithAvatar!]!
  createdAt: Date!
}

type UserWithAvatar {
  id: ID!
  name: String!
  avatarUrl: String
}

type Query {
  "Список чатов пользователя (без сообщений)"
  userChats: [ChatWithoutMessages!]!
  "Запрос одиночного чата с указанным пользователем"
  chatWithUser(userUuid: String!): ChatWithoutMessages
  "Запрос чата по ID (участники чата включают текущего пользователя)"
  chatById(chatId: ID!): ChatWithoutMessages
  chatAllAvatars(chatId: ID!): [AvatarInfo]!
}

type Mutation {
  """
  Создание чата.
  Возвращаемый список участников содержит ID текущего пользователя (создателя).
  """
  createChat(
    participantsIds: [ID!]!
    name: String
    avatar: Upload
  ): ChatWithoutMessages!
  """
  Групповой чат удаляет создатель для всех.

  Одиночный чат помечается флагом is_deleted в таблице party
  у пользователя, который удалил чат.
  """
  deleteChat(chatId: ID!): Boolean!
  uploadChatAvatar(image: Upload!, chatId: ID!): String!
  """
  Удаление аватара чата.
  Возвращаемая строка содержит URL нового аватара.
  """
  deleteChatAvatar(chatId: ID!, avatarUrl: String!): String
  """
  Добавление пользователя в чат.
  Только создатель чата может добавлять новых участников.
  """
  addUserToChat(chatId: ID!, userUuid: ID!): ChatWithoutMessages!
  """
  Удаление пользователя из чата.
  Только создатель чата может удалять участников.
  """
  removeUserFromChat(chatId: ID!, userUuid: ID!): ChatWithoutMessages!
  changeChatName(chatId: ID!, newName: String!): ChatWithoutMessages!
}

type Subscription {
  "Подписка на изменения существующего чата"
  chatById(chatId: ID!): ChatWithoutMessages
  "Подписка на изменения списка чатов"
  userChats: [ChatWithoutMessages!]!
}
